name: Docker Image CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
      with:
        platforms: 'arm64'
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Build the Docker image
      run: docker buildx build --platform linux/arm64 --tag backend  -o type=docker,dest=- ./backend > backend.tar
    - name: Upload tarball
      uses: actions/upload-artifact@v4
      with:
        name: backend.tar
        path: backend.tar
        
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Download math result for job 1
      uses: actions/download-artifact@v4
      with:
        name: backend.tar
    - name: send tar to EC2 server
      uses: easingthemes/ssh-deploy@main
      with:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SOURCE: backend.tar
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
          REMOTE_USER: ${{ secrets.REMOTE_USER }}
          TARGET: /home/ubuntu/backend.tar
    - name: remove artifact
      uses: geekyeggo/delete-artifact@v5
      with:
          name: backend.tar
    - name: ssh into EC2
      env:
          PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          HOSTNAME: ${{secrets.REMOTE_HOST}}
          USER_NAME: ${{secrets.REMOTE_USER}}
          DB_HOST: ${{secrets.DB_HOST}}
          DB_USERNAME: ${{secrets.DB_USERNAME}}
          DB_PASSWORD: ${{secrets.DB_PASSWORD}}
      run: |
        echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
        ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOSTNAME} '
            sudo docker rm -v -f $(sudo docker ps -qa)
            sudo docker load < backend.tar
            '
        ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOSTNAME} "
            sudo docker run -d --memory=400m --memory-swap=3g -e DB_USERNAME=$DB_USERNAME -e DB_PASSWORD=$DB_PASSWORD -e DB_HOST=$DB_HOST -p8080:8080 backend 
            "
